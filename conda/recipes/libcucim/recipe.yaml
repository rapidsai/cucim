# Copyright (c) 2025, NVIDIA CORPORATION.
schema_version: 1

context:
  version: ${{ env.get("RAPIDS_PACKAGE_VERSION") }}
  minor_version: ${{ (version | split("."))[:2] | join(".") }}
  cuda_version: ${{ (env.get("RAPIDS_CUDA_VERSION") | split("."))[:2] | join(".") }}
  cuda_major: '${{ (env.get("RAPIDS_CUDA_VERSION") | split("."))[0] }}'
  date_string: '${{ env.get("RAPIDS_DATE_STRING") }}'
  py_version: ${{ env.get("RAPIDS_PY_VERSION") }}
  py_buildstring: ${{ py_version | version_to_buildstring }}
  head_rev: ${{ git.head_rev(".")[:8] }}
  linux64: ${{ linux and x86_64 }}

package:
  name: libcucim
  version: ${{ version }}

source:
  path: ../../..

build:
  string: cuda${{ cuda_major }}_py${{ py_buildstring }}_${{ date_string }}_${{ head_rev }}
  dynamic_linking:
    overlinking_behavior: error
  prefix_detection:
    ignore:
      - lib/libcucim.so
      - lib/libcucim.so.*
      - lib/cucim.*.so
  script:
    content: |
      # Remove `-fdebug-prefix-map` line from CFLAGS and CXXFLAGS so the
      # incrementing version number in the compile line doesn't break the
      # cache
      set -x
      export CFLAGS=$(echo $CFLAGS | sed -E 's@\-fdebug\-prefix\-map[^ ]*@@g')
      export CXXFLAGS=$(echo $CXXFLAGS | sed -E 's@\-fdebug\-prefix\-map[^ ]*@@g')
      set +x

      set -euo pipefail

      CUCIM_BUILD_TYPE=${CUCIM_BUILD_TYPE:-release}
      LD_LIBRARY_PATH=${LD_LIBRARY_PATH:-}

      # CUDA needs to include $PREFIX/include as system include path
      export CUDAFLAGS="-isystem $BUILD_PREFIX/include -isystem $PREFIX/include "
      export LD_LIBRARY_PATH="$BUILD_PREFIX/lib:$PREFIX/lib:$LD_LIBRARY_PATH"

      # Build libcucim core
      ./run build_local libcucim "${CUCIM_BUILD_TYPE}" "${PREFIX}"

      mkdir -p "$PREFIX/bin" "$PREFIX/lib" "$PREFIX/include"
      cp -P -r install/bin/* "$PREFIX/bin/" || true
      cp -P -r install/lib/* "$PREFIX/lib/" || true
      cp -P -r install/include/* $"PREFIX/include/" || true

      # Build plugins
      for plugin_name in cuslide cumed; do
          echo "Building cucim.kit.${plugin_name} ..."
          ./run build_local ${plugin_name} "${CUCIM_BUILD_TYPE}" "${PREFIX}"
          mkdir -p "$PREFIX/bin" "$PREFIX/lib" "$PREFIX/include"
          cp -P -r cpp/plugins/cucim.kit.${plugin_name}/install/bin/* "$PREFIX/bin/" || true
          cp -P -r cpp/plugins/cucim.kit.${plugin_name}/install/lib/* "$PREFIX/lib/" || true
      done
    secrets:
      - AWS_ACCESS_KEY_ID
      - AWS_SECRET_ACCESS_KEY
      - AWS_SESSION_TOKEN
    env:
      CMAKE_C_COMPILER_LAUNCHER: ${{ env.get("CMAKE_C_COMPILER_LAUNCHER") }}
      CMAKE_CUDA_COMPILER_LAUNCHER: ${{ env.get("CMAKE_CUDA_COMPILER_LAUNCHER") }}
      CMAKE_CXX_COMPILER_LAUNCHER: ${{ env.get("CMAKE_CXX_COMPILER_LAUNCHER") }}
      CMAKE_GENERATOR: ${{ env.get("CMAKE_GENERATOR") }}
      SCCACHE_BUCKET: ${{ env.get("SCCACHE_BUCKET") }}
      SCCACHE_IDLE_TIMEOUT: ${{ env.get("SCCACHE_IDLE_TIMEOUT") }}
      SCCACHE_REGION: ${{ env.get("SCCACHE_REGION") }}
      SCCACHE_S3_USE_SSL: ${{ env.get("SCCACHE_S3_USE_SSL") }}
      SCCACHE_S3_NO_CREDENTIALS: ${{ env.get("SCCACHE_S3_NO_CREDENTIALS") }}
      SCCACHE_S3_KEY_PREFIX: libcucim/${{ env.get("RAPIDS_CONDA_ARCH") }}/cuda${{ cuda_major }}

requirements:
  build:
    - ${{ compiler("c") }}
    - ${{ compiler("cuda") }}
    - ${{ compiler("cxx") }}
    - ${{ stdlib("c") }}
    - binutils
    - cmake ${{ cmake_version }}
    - cuda-version =${{ cuda_version }}
    - make
    - ninja
    - if: x86_64
      then: yasm
  host:
    - cuda-cudart-dev
    - cuda-version =${{ cuda_version }}
    - libnvjpeg-dev
    - libnvjpeg-static
    - nvtx-c >=3.1.0
    - openslide
    - if: linux64
      then: libcufile-dev
  run:
    - ${{ pin_compatible("cuda-version", upper_bound="x", lower_bound="x") }}
    - cuda-cudart
    - libnvjpeg
    - if: linux64
      then: libcufile
  run_constraints:
    - ${{ pin_compatible("openslide") }}
  ignore_run_exports:
    by_name:
      - cuda-cudart
      - cuda-version
      - libcufile
      - libnvjpeg
      - openslide

about:
  homepage: https://developer.nvidia.com/multidimensional-image-processing
  license: Apache-2.0
  summary: libcucim C++ library
