# Copyright (c) 2025, NVIDIA CORPORATION.
schema_version: 1

context:
  version: ${{ env.get("RAPIDS_PACKAGE_VERSION") }}
  minor_version: ${{ (version | split("."))[:2] | join(".") }}
  cuda_version: ${{ (env.get("RAPIDS_CUDA_VERSION") | split("."))[:2] | join(".") }}
  cuda_major: '${{ (env.get("RAPIDS_CUDA_VERSION") | split("."))[0] }}'
  date_string: '${{ env.get("RAPIDS_DATE_STRING") }}'
  py_version: ${{ env.get("RAPIDS_PY_VERSION") }}
  py_buildstring: ${{ py_version | version_to_buildstring }}
  head_rev: ${{ git.head_rev(".")[:8] }}
  linux64: ${{ linux and x86_64 }}

package:
  name: cucim
  version: ${{ version }}

source:
  path: ../../..

build:
  string: cuda${{ cuda_major }}_py${{ py_buildstring }}_${{ date_string }}_${{ head_rev }}
  dynamic_linking:
    overlinking_behavior: error
  prefix_detection:
    ignore:
      - lib/libcucim.so
      - lib/libcucim.so.*
      - lib/cucim.*.so
  script:
    content: |
      CUCIM_BUILD_TYPE=${CUCIM_BUILD_TYPE:-release}

      # CUDA needs to include $PREFIX/include as system include path
      export CUDAFLAGS="-isystem $BUILD_PREFIX/include -isystem $PREFIX/include "
      export LD_LIBRARY_PATH="$BUILD_PREFIX/lib:$PREFIX/lib:$LD_LIBRARY_PATH"

      # It is assumed that this script is executed from the root of the repo directory by conda-build
      # (https://conda-forge.org/docs/maintainer/knowledge_base.html#using-cmake)
      ./run build_local cucim ${CUCIM_BUILD_TYPE}

      cp -P python/install/lib/* python/cucim/src/cucim/clara/

      pushd python/cucim

      python -m pip install --config-settings rapidsai.disable-cuda=true . -vv

      popd
    secrets:
      - AWS_ACCESS_KEY_ID
      - AWS_SECRET_ACCESS_KEY
      - AWS_SESSION_TOKEN
    env:
      CMAKE_C_COMPILER_LAUNCHER: ${{ env.get("CMAKE_C_COMPILER_LAUNCHER") }}
      CMAKE_CUDA_COMPILER_LAUNCHER: ${{ env.get("CMAKE_CUDA_COMPILER_LAUNCHER") }}
      CMAKE_CXX_COMPILER_LAUNCHER: ${{ env.get("CMAKE_CXX_COMPILER_LAUNCHER") }}
      CMAKE_GENERATOR: ${{ env.get("CMAKE_GENERATOR") }}
      SCCACHE_BUCKET: ${{ env.get("SCCACHE_BUCKET") }}
      SCCACHE_IDLE_TIMEOUT: ${{ env.get("SCCACHE_IDLE_TIMEOUT") }}
      SCCACHE_REGION: ${{ env.get("SCCACHE_REGION") }}
      SCCACHE_S3_USE_SSL: ${{ env.get("SCCACHE_S3_USE_SSL") }}
      SCCACHE_S3_NO_CREDENTIALS: ${{ env.get("SCCACHE_S3_NO_CREDENTIALS") }}
      SCCACHE_S3_KEY_PREFIX: cucim/${{ env.get("RAPIDS_CONDA_ARCH") }}/cuda${{ cuda_major }}

requirements:
  build:
    - cmake ${{ cmake_version }}
    - make
    - ninja
    - ${{ compiler("c") }}
    - ${{ compiler("cxx") }}
    - ${{ compiler("cuda") }}
    - cuda-version =${{ cuda_version }}
    - ${{ stdlib("c") }}
  host:
    - click
    - cuda-version =${{ cuda_version }}
    - cupy >=12.0.0
    - libcucim =${{ version }}
    - pip
    - python =${{ py_version }}
    - rapids-build-backend >=0.3.0,<0.4.0.dev0
    - scikit-image >=0.19.0,<0.25.0a0
    - scipy >=1.6
    - setuptools >=61.0.0
    - if: cuda_major != "11"
      then: cuda-cudart-dev
  run:
    - ${{ pin_compatible("cuda-version", upper_bound="x", lower_bound="x") }}
    - click
    - cupy >=12.0.0
    - lazy_loader >=0.1
    - libcucim =${{ version }}
    - numpy >=1.23,<3.0a0
    - python
    - scikit-image >=0.19.0,<0.25.0a0
    - scipy >=1.6
    - if: cuda_major != "11"
      then: cuda-cudart
  run_constraints:
    - openslide-python >=1.3.0
  ignore_run_exports:
    by_name:
      - cuda-cudart
      - cuda-version
      - if: cuda_major == "11"
        then: cudatoolkit

tests:
  - python:
      imports:
        - cucim
      pip_check: False

about:
  homepage: ${{ load_from_file("python/cucim/pyproject.toml").project.urls.Homepage }}
  license: ${{ load_from_file("python/cucim/pyproject.toml").project.license.text }}
  summary: ${{ load_from_file("python/cucim/pyproject.toml").project.description }}
