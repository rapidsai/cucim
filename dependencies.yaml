# Dependency list for https://github.com/rapidsai/dependency-file-generator
files:
  all:
    output: conda
    matrix:
      cuda: ["11.8", "12.2"]
      arch: [x86_64]
    includes:
      - build
      - cuda
      - cuda_version
      - checks
      - docs
      - py_version
      - run
      - test_python
  test_python:
    output: none
    includes:
      - cuda_version
      - py_version
      - test_python
  checks:
    output: none
    includes:
      - checks
      - py_version
  docs:
    output: none
    includes:
      - cuda_version
      - docs
      - py_version
  py_build:
    output: pyproject
    pyproject_dir: python/cucim
    extras:
      table: build-system
    includes:
      - build
  py_run:
    output: pyproject
    pyproject_dir: python/cucim
    extras:
      table: project
    includes:
      - run
  py_optional_test:
    output: pyproject
    pyproject_dir: python/cucim
    extras:
      table: project.optional-dependencies
      key: test
    includes:
      - test_python
  py_develop:
    output: pyproject
    pyproject_dir: python/cucim
    extras:
      table: project.optional-dependencies
      key: developer
    includes:
      - develop
  py_develop:
    output: pyproject
    pyproject_dir: python/cucim
    extras:
      table: project.optional-dependencies
      key: docs
    includes:
      - docs
channels:
  - rapidsai
  - rapidsai-nightly
  - conda-forge
  - nvidia
dependencies:
  build:
    common:
      # Note:
      #   Currently omit pyproject output_type from cmake, ninja. The python
      #   build doesn't use these, but assumes that the C++ libcucim shared
      #   library had already previously been built and the .so file copied to
      #   python/cucim/src/cucim/clara/ before calling `pip install .`.
      - output_types: [conda, requirements]
        packages:
          - cmake>=3.23.1,!=3.25.0
          - ninja
      - output_types: conda
        packages:
          - c-compiler
          - cxx-compiler
      - output_types: [requirements, pyproject]
        packages:
          - setuptools>=24.2.0
          - wheel
    specific:
      - output_types: conda
        matrices:
          - matrix:
              arch: x86_64
            packages:
              - gcc_linux-64=11.*
              - sysroot_linux-64==2.17
              - yasm
          - matrix:
              arch: aarch64
            packages:
              - gcc_linux-aarch64=11.*
              - sysroot_linux-aarch64==2.17
      - output_types: conda
        matrices:
          - matrix:
              arch: x86_64
              cuda: "11.8"
            packages:
              - nvcc_linux-64=11.8
          - matrix:
              arch: aarch64
              cuda: "11.8"
            packages:
              - nvcc_linux-aarch64=11.8
          - matrix:
              cuda: "12.*"
            packages:
              - cuda-nvcc
  checks:
    common:
      - output_types: [conda, requirements]
        packages:
          - pre-commit
  cuda_version:
    specific:
      - output_types: conda
        matrices:
          - matrix:
              cuda: "11.2"
            packages:
              - cuda-version=11.2
          - matrix:
              cuda: "11.4"
            packages:
              - cuda-version=11.4
          - matrix:
              cuda: "11.5"
            packages:
              - cuda-version=11.5
          - matrix:
              cuda: "11.8"
            packages:
              - cuda-version=11.8
          - matrix:
              cuda: "12.0"
            packages:
              - cuda-version=12.0
          - matrix:
              cuda: "12.2"
            packages:
              - cuda-version=12.2
  cuda:
    specific:
      - output_types: conda
        matrices:
          - matrix:
              cuda: "11.*"
            packages:
              - cudatoolkit
          - matrix:
              cuda: "12.*"
            packages:
              - cuda-cudart-dev
      - output_types: conda
        matrices:
          - matrix:
              cuda: "11.8"
            packages:
              - libnvjpeg=11.6.0.55
              - libnvjpeg-dev=11.6.0.55
          - matrix:
              cuda: "12.*"
            packages:
              - libnvjpeg-dev
              - libnvjpeg-static
      - output_types: conda
        matrices:
          - matrix:
              arch: aarch64
            packages:
          - matrix:
              arch: x86_64
              cuda: "11.8"
            packages:
              - libcufile=1.4.0.31
              - libcufile-dev=1.4.0.31
          - matrix:
              arch: x86_64
              cuda: "12.*"
            packages:
              - libcufile-dev
  develop:
    common:
      - output_types: [conda, requirements, pyproject]
        packages:
          - pre-commit
          - black
          - ruff
          - isort
  docs:
    common:
      - output_types: [conda, requirements, pyproject]
        packages:
          - ipython
          - nbsphinx
          - numpydoc>=1.5
          - pydata-sphinx-theme
          - recommonmark
          # TODO: sphinx upper version limit can likely be removed after pydata 0.13
          # is released. See https://github.com/pydata/pydata-sphinx-theme/issues/1094
          - sphinx<6
  py_version:
    specific:
      - output_types: conda
        matrices:
          - matrix:
              py: "3.8"
            packages:
              - python=3.8
          - matrix:
              py: "3.9"
            packages:
              - python=3.9
          - matrix:
              py: "3.10"
            packages:
              - python=3.10
          - matrix:
              py: "3.11"
            packages:
              - python=3.11
          - matrix:
            packages:
              - python>=3.8,<3.12
  run:
    common:
      - output_types: [conda, requirements, pyproject]
        packages:
          - lazy_loader>=0.1
          - scikit-image>=0.19.0,<0.23.0a0
          - scipy
      - output_types: conda
        packages:
          - cupy>=12.0.0
          - numpy>=1.23.4
          # All dependencies below this point are specific to `cucim.clara` and
          # are not needed for either `cucim.core` or `cucim.skimage`. I did
          # not include these under a "pyproject" output so that it is still
          # possible to run `pip install .` from the python/cucim folder
          # without having build the C++ library at all. This allows, usage of
          # usage of `cucim.skimage` on Windows, for example.
          - click
          - jbig
          - libwebp-base
          - xz
          - zlib
          - zstd
          # Not sure where these go, if anywhere:
          # - openslide
          # - xorg-libxcb
      - output_types: [requirements, pyproject]
        packages:
          - cupy-cuda11x>=12.0.0
          - numpy
  test_python:
    common:
      - output_types: [conda, requirements, pyproject]
        packages:
          - GPUtil>=1.4.0
          - psutil>=5.8.0
          - pytest>=6.2.4,<8.0.0a0
          - pytest-cov>=2.12.1
          - pytest-lazy-fixture>=0.6.3
          - pytest-xdist
          - tifffile>=2022.7.28
          - pooch>=1.6.0  # needed to download scikit-image sample data
          - pywavelets>=1.0
      - output_types: [conda]
        packages:
          - imagecodecs>=2021.6.8
          - matplotlib-base
          - openslide-python>=1.3.0
          - pip
          - pip:
            - opencv-python-headless>=4.6
      - output_types: [requirements, pyproject]
        packages:
          # skip packages on arm64 that don't provide a wheel
          - imagecodecs>=2021.6.8; platform_machine=='x86_64'
          - openslide-python>=1.3.0; platform_machine=='x86_64'
          - matplotlib
          - opencv-python-headless>=4.6
          - click
      - output_types: [pyproject]
        packages:
          # Already added to requirements via docs. This is for tests.
          - numpydoc>=1.5
